

//  ------------------------------------------

//             INDEX MODULE
       
//  [ VECTOR REPRESENTATION PLUGGED INTO THE VDB ]  --> HANDLE MEMORY ASPECTS TO STORE BOTH THE VECTOR AND THE REPO OBJ.

//  THIS MODULE WILL FOCUS ON HOW TO MANAGE MEMORY PROPERLY SO THAT ACCESS TO THE VECTOR SPACE IS FAST, NO MEMORY IS WASTED AND THE 
//  DISPLAY OF VECTORS AND REPO OBJS. IN MEMORY ARE SAFE AND CORRECT
//                             
//  ------------------------------------------


// CONCURRENCY ASPECTS NOTES
    // THERE SHOULDN'T CRUCIAL CONCURRENCY ASPECTS INVOLVED IN THIS DB
    // THE ONLY TIMES INSERTIONS OR DELETIONS ARE GOING TO BE MADE ARE WHEN A NEW USER ACCOUNT IS CRAWLED
    // AND AT THE SAME TIME SOME OTHER ONE COULD MATCH THESE INSERTING REPOS AND SAME FOR DELETION.


// MEMORY MANAGEMENT
    // CONSIDERING LMDB APPROACH IF VIABLE FOR IVF



// MEMORY SPECULATION



pub struct Repo {

}

pub struct RepoFlat {

}

impl Repo {
    pub fn flatten(&self) -> RepoFlat{
        todo!()
    }
}

impl RepoFlat {

    pub fn rebuild(&self) -> Repo {
        todo!()
    }

}